version: '3.8'
services:
 nginx:
   container_name: nginx
   image: nginx:latest
   ports:
     - "80:80"
     - "443:443"
   volumes:
     - ./nginx/nginx.conf:/etc/nginx/nginx.conf
     - ./nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf
   depends_on:
     - research-server
   healthcheck:
     test: ["CMD", "nginx", "-t"]
     interval: 10s
     timeout: 5s
     retries: 3
   networks:
     - app-network

 postgres:
   container_name: postgres
   image: postgres:15
   environment:
     POSTGRES_USER: postgres
     POSTGRES_DB: research_db
     POSTGRES_PASSWORD: researchpassword
   volumes:
     - postgres-data:/var/lib/postgresql/data
   ports:
     - "5432:5432"
   healthcheck:
     test: ["CMD-SHELL", "pg_isready -U postgres"]
     interval: 5s
     timeout: 5s
     retries: 5
   networks:
     - app-network

 langfuse-server:
   image: langfuse/langfuse:2
   platform: linux/amd64
   depends_on:
     postgres:
       condition: service_healthy
   ports:
     - "3000:3000"
   environment:
     - DATABASE_URL=postgresql://postgres:researchpassword@postgres:5432/research_db
     - NEXTAUTH_SECRET=mysecret
     - SALT=mysalt
     - ENCRYPTION_KEY=0000000000000000000000000000000000000000000000000000000000000000
     - NEXTAUTH_URL=http://localhost:3000
     - TELEMETRY_ENABLED=${TELEMETRY_ENABLED:-true}
     - LANGFUSE_ENABLE_EXPERIMENTAL_FEATURES=${LANGFUSE_ENABLE_EXPERIMENTAL_FEATURES:-false}
   networks:
     - app-network

 research-server:
   container_name: research-server
   build:
     context: .
     dockerfile: Dockerfile
   volumes:
     - .:/app
     - ./prompts:/app/prompts
     - content-data:/data
     - ~/.aws:/root/.aws
   ports:
     - "8000:8000"
     - "5678:5678"
   environment:
     - PYTHONUNBUFFERED=1
     - POSTGRES_CONNECTION=postgresql://postgres:researchpassword@postgres:5432/research_db
   env_file:
     - .env
   depends_on:
     postgres:
       condition: service_healthy
   healthcheck:
     test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
     interval: 30s
     timeout: 10s
     retries: 3
   command: >
     sh -c "
     /app/wait-for-it.sh postgres:5432 -t 60 &&
     if [ \"$$INIT_DB\" = \"true\" ]; then
       python init_db.py;
     fi &&
     uvicorn app:app --host 0.0.0.0 --port 8000 --reload
     "
   networks:
     - app-network

volumes:
 postgres-data:
 content-data:
   driver: local

networks:
 app-network:
   driver: bridge